import os
import logging
import time
from datetime import datetime
from dotenv import load_dotenv
import mysql.connector
from mysql.connector import pooling

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

# –ó–∞–≥—Ä—É–∑–∏—Ç—å .env
load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
DB_HOST = os.getenv('DB_HOST', '127.0.0.1')
DB_USER = os.getenv('DB_USER', 'todo_user')
DB_PASSWORD = os.getenv('DB_PASSWORD', '')
DB_NAME = os.getenv('DB_NAME', 'todo_bot')

if not TELEGRAM_TOKEN:
    raise RuntimeError('TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.template -> .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–æ–∫–µ–Ω')

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MySQL
_db_config = {
    'host': DB_HOST,
    'user': DB_USER,
    'password': DB_PASSWORD,
    'database': DB_NAME,
    'charset': 'utf8mb4',
    'use_unicode': True,
}

# –ü–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ‚Äî –ø–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –ë–î —Å—Ç–∞—Ä—Ç—É–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
def create_pool_with_retry(retries: int = 10, delay: int = 3):
    last_exc = None
    for attempt in range(1, retries + 1):
        try:
            pool = pooling.MySQLConnectionPool(pool_name='todo_pool', pool_size=5, **_db_config)
            logger.info('–°–æ–∑–¥–∞–Ω –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫ –ë–î')
            return pool
        except Exception as e:
            last_exc = e
            logger.warning('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î (–ø–æ–ø—ã—Ç–∫–∞ %s/%s): %s', attempt, retries, e)
            time.sleep(delay)
    logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ—Å–ª–µ %s –ø–æ–ø—ã—Ç–æ–∫', retries)
    raise last_exc

# –ü–æ–ª—É—á–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –ø—É–ª
_pool = None
try:
    _pool = create_pool_with_retry()
except Exception as e:
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—É–ª–∞: %s', e)

def get_conn():
    if _pool is None:
        return mysql.connector.connect(**_db_config)
    return _pool.get_connection()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ö–µ–º—ã
def init_db():
    conn = None
    try:
        conn = get_conn()
        cursor = conn.cursor()
        cursor.execute(
            """
            CREATE TABLE IF NOT EXISTS tasks (
                user_id BIGINT NOT NULL,
                id INT NOT NULL AUTO_INCREMENT,
                description TEXT NOT NULL,
                done TINYINT(1) NOT NULL DEFAULT 0,
                created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
                PRIMARY KEY (user_id, id)
            ) CHARACTER SET = utf8mb4;
            """
        )
        conn.commit()
        cursor.close()
        logger.info('–¢–∞–±–ª–∏—Ü–∞ tasks –≥–æ—Ç–æ–≤–∞')
    except Exception as e:
        logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: %s', e)
        raise
    finally:
        if conn:
            conn.close()

# CRUD-–æ–ø–µ—Ä–∞—Ü–∏–∏
def add_task(user_id: int, description: str) -> int:
    conn = get_conn()
    cursor = conn.cursor()

    cursor.execute(
        'SELECT COUNT(*)+1 FROM tasks WHERE user_id = %s',
        (user_id,)
    )
    next_id = cursor.fetchone()[0]

    cursor.execute(
        'INSERT INTO tasks (user_id, id, description) VALUES (%s, %s, %s)',
        (user_id, next_id, description)
    )
    conn.commit()
    cursor.close()
    conn.close()
    return next_id


def list_tasks(user_id: int, include_done: bool = False):
    conn = get_conn()
    cursor = conn.cursor(dictionary=True)
    if include_done:
        cursor.execute('SELECT id, description, done, created_at FROM tasks WHERE user_id = %s ORDER BY created_at DESC', (user_id,))
    else:
        cursor.execute('SELECT id, description, done, created_at FROM tasks WHERE user_id = %s AND done = 0 ORDER BY created_at DESC', (user_id,))
    rows = cursor.fetchall()
    cursor.close()
    conn.close()
    return rows

def mark_done(task_id: int, user_id: int) -> int:
    conn = get_conn()
    cursor = conn.cursor()
    cursor.execute('UPDATE tasks SET done = 1 WHERE id = %s AND user_id = %s', (task_id, user_id))
    conn.commit()
    affected = cursor.rowcount
    cursor.close()
    conn.close()
    return affected

def delete_task(task_id: int, user_id: int) -> int:
    conn = get_conn()
    cursor = conn.cursor()
    cursor.execute('DELETE FROM tasks WHERE id = %s AND user_id = %s', (task_id, user_id))
    conn.commit()
    affected = cursor.rowcount
    cursor.close()
    conn.close()
    return affected

# === Telegram bot ===
bot = telebot.TeleBot(TELEGRAM_TOKEN, parse_mode='HTML')

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        KeyboardButton("‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"),
        KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
    )
    kb.row(
        KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")
    )
    return kb

@bot.message_handler(commands=['start', 'help'])
def handle_start(message):
    txt = (
        '–ü—Ä–∏–≤–µ—Ç, –º–æ–π –¥–æ—Å—Ç–∏–≥–∞—Ç–æ—Ä!üí™üèªü§ì\n–ß—É–≤—Å—Ç–≤—É–µ—à—å, —á—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –∏ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –ø–æ–º–æ—â–Ω–∏–∫ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á?üò©'
        '\n–Ø –±—É–¥—É —Ç–≤–æ–∏–º –ª—é–±–∏–º—ã–º!üòèüòâüòò\n'
        '–ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é: üëáüèª\n'
        '/new ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É\n'
        '/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á\n'
        '/done &lt;id&gt; ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π\n'
        '/delete &lt;id&gt; ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n'
        '/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ'
    )
    bot.send_message(message.chat.id, txt, reply_markup=main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text == "‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
def menu_new_task(message):
    handle_new(message)

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
def menu_list_tasks(message):
    handle_list(message)

@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def menu_help(message):
    handle_start(message)


@bot.message_handler(commands=['new'])
def handle_new(message):
    msg = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', reply_markup=main_menu())
    bot.register_next_step_handler(msg, process_new_task)


def process_new_task(message):
    text = (message.text or '').strip()
    if not text:
        bot.send_message(message.chat.id, '–ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç ‚Äî –∑–∞–¥–∞—á–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë: /new',
                         reply_markup=main_menu())
        return
    try:
        tid = add_task(message.from_user.id, text)
        bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å id={tid}', reply_markup=main_menu())
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: %s', e)
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.', reply_markup=main_menu())


@bot.message_handler(commands=['list'])
def handle_list(message):
    try:
        rows = list_tasks(message.from_user.id)
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –∑–∞–¥–∞—á: %s', e)
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∑–∞–¥–∞—á. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.', reply_markup=main_menu())
        return

    if not rows:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –°–æ–∑–¥–∞—Ç—å: /new', reply_markup=main_menu())
        return

    for row in rows:
        text = f"<b>#{row['id']}</b> ‚Äî {row['description']}\n—Å–æ–∑–¥–∞–Ω–æ: {row['created_at']}"
        kb = InlineKeyboardMarkup()
        kb.add(
            InlineKeyboardButton('‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data=f"done:{row['id']}"),
            InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f"del:{row['id']}")
        )
        bot.send_message(message.chat.id, text, reply_markup=kb)


@bot.message_handler(commands=['done'])
def handle_done_cmd(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /done <id>')
        return
    try:
        tid = int(parts[1])
    except ValueError:
        bot.send_message(message.chat.id, 'id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        return
    try:
        affected = mark_done(tid, message.from_user.id)
        if affected:
            bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ #{tid} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è')
        else:
            bot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞')
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∑–∞–¥–∞—á–∏: %s', e)
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.')

@bot.message_handler(commands=['delete'])
def handle_delete_cmd(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <id>')
        return
    try:
        tid = int(parts[1])
    except ValueError:
        bot.send_message(message.chat.id, 'id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
        return
    try:
        affected = delete_task(tid, message.from_user.id)
        if affected:
            bot.send_message(message.chat.id, f'–ó–∞–¥–∞—á–∞ #{tid} —É–¥–∞–ª–µ–Ω–∞')
        else:
            bot.send_message(message.chat.id, '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞')
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: %s', e)
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏. –°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏.')

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    data = call.data or ''
    try:
        if data.startswith('done:'):
            tid = int(data.split(':', 1)[1])
            affected = mark_done(tid, call.from_user.id)
            if affected:
                bot.answer_callback_query(call.id, '–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ')
                try:
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
                except Exception:
                    pass
                bot.send_message(call.message.chat.id, f'–ó–∞–¥–∞—á–∞ #{tid} –æ—Ç–º–µ—á–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π', reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤')
        elif data.startswith('del:'):
            tid = int(data.split(':', 1)[1])
            affected = delete_task(tid, call.from_user.id)
            if affected:
                bot.answer_callback_query(call.id, '–£–¥–∞–ª–µ–Ω–æ')
                try:
                    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
                except Exception:
                    pass
                bot.send_message(call.message.chat.id, f'–ó–∞–¥–∞—á–∞ #{tid} —É–¥–∞–ª–µ–Ω–∞', reply_markup=main_menu())
            else:
                bot.answer_callback_query(call.id, '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤')
        else:
            bot.answer_callback_query(call.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
    except Exception as e:
        logger.exception('–û—à–∏–±–∫–∞ –≤ callback: %s', e)
        try:
            bot.answer_callback_query(call.id, '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ')
        except Exception:
            pass

if __name__ == '__main__':
    try:
        init_db()
    except Exception:
        logger.warning('–ù–µ —É–¥–∞–ª–æ—Å—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã tasks. –í–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ.')

    logger.info('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...')

    bot.infinity_polling(timeout=20, long_polling_timeout=5)

